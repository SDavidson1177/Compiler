Context-sensitive Syntax

The type of an ID is int if the dcl in which the ID is declared derives a sequence containing a type that derives INT.
The type of an ID is int* if the dcl in which the ID is declared derives a sequence containing a type that derives INT STAR.
The type of a NUM is int.
The type of a NULL token is int*.
The type of a factor deriving ID, NUM, or NULL is the same as the type of that token.
The type of an lvalue deriving ID is the same as the type of that ID.
The type of a factor deriving LPAREN expr RPAREN is the same as the type of the expr.
The type of an lvalue deriving LPAREN lvalue RPAREN is the same as the type of the derived lvalue.
The type of a factor deriving AMP lvalue is int*. The type of the derived lvalue (i.e. the one preceded by AMP) must be int.
The type of a factor or lvalue deriving STAR factor is int. The type of the derived factor (i.e. the one preceded by STAR) must be int*.
The type of a factor deriving NEW INT LBRACK expr RBRACK is int*. The type of the derived expr must be int.
The type of a factor deriving ID LPAREN RPAREN is int. The procedure whose name is ID must have an empty signature.
The type of a factor deriving ID LPAREN arglist RPAREN is int. The procedure whose name is ID must have a signature whose length is equal to the number of expr strings (separated by COMMA) that are derived from arglist. Further the types of these expr strings must exactly match, in order, the types in the procedure's signature.
The type of a term deriving factor is the same as the type of the derived factor.
The type of a term directly deriving anything other than just factor is int. The term and factor directly derived from such a term must have type int.
The type of an expr deriving term is the same as the type of the derived term.
When expr derives expr PLUS term:
The derived expr and the derived term may both have type int, in which case the type of the expr deriving them is int.
The derived expr may have type int* and the derived term may have type int, in which case the type of the expr deriving them is int*.
The derived expr may have type int and the derived term may have type int*, in which case the type of the expr deriving them is int*.
When expr derives expr MINUS term:
The derived expr and the derived term may both have type int, in which case the type of the expr deriving them is int.
The derived expr may have type int* and the derived term may have type int, in which case the type of the expr deriving them is int*.
The derived expr and the derived term may both have type int*, in which case the type of the expr deriving them is int.
The second dcl in the sequence directly derived from main must derive a type that derives INT.
The expr in the sequence directly derived from procedure must have type int.
The expr in the sequence directly derived from main must have type int.
When statement derives lvalue BECOMES expr SEMI, the derived lvalue and the derived expr must have the same type.
When statement derives PRINTLN LPAREN expr RPAREN SEMI, the derived expr must have type int.
When statement derives DELETE LBRACK RBRACK expr SEMI, the derived expr must have type int*.
Whenever test directly derives a sequence containing two exprs, they must both have the same type.
When dcls derives dcls dcl BECOMES NUM SEMI, the derived dcl must derive a sequence containing a type that derives INT.
When dcls derives dcls dcl BECOMES NULL SEMI, the derived dcl must derive a sequence containing a type that derives INT STAR.